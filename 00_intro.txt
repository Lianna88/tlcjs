:next_link: 01_values
:load_files: ["code/intro.js"]

= Introduction =

This is a book about getting ((computer))s to do what you want them to
do. Computers are about as common as screwdrivers today, but they contain a
lot more hidden complexity and thus are harder to operate and
understand. To many, they remain alien, slightly threatening things.

image::img/generated/computer.png[alt="Communicating with a computer"]

(((Graphical user interface)))We've found two effective ways of
bridging the communication gap between us, squishy biological
organisms with a talent for social and spatial reasoning, and
computers, unfeeling manipulators of meaningless data. The first is to
appeal to our sense of the physical world and build interfaces that
mimic that world and allow us to manipulate shapes on a screen with
our fingers. This works very well for casual machine interaction.

(((programming language)))But we have not yet found a good way to use
the point-and-click approach to communicate things to the computer
that the designer of the interface did not anticipate. For open-ended
interfaces, such as instructing the computer to perform arbitrary
tasks, we've had more luck with an approach that makes use of our
talent for language: teaching the machine a language.

(((human language)))(((expressivity)))Human languages allow words and
phrases to be combined in many ways, which allows us to say
many different things. Computer languages, though typically less
grammatically flexible, follow a similar principle.

(((JavaScript,availability of)))(((casual computing)))Casual computing
has become much more widespread in the past 20 years, and
language-based interfaces, which once were the default way in which
people interacted with computers, have largely been replaced with
graphical interfaces. But they are still there, if you know where to
look. One such language, JavaScript, is built into almost every
web ((browser)) and is thus available on just about every consumer
device.

indexsee:[web browser,browser]This book intends to make you familiar
enough with this language to be able to make a computer do what you
want.

== On programming ==

(((programming,difficulty of)))Besides explaining JavaScript, I also
will introduce the basic principles of programming. Programming, it
turns out, is hard. The fundamental rules are typically simple and
clear. But programs built on top of these rules tend to become complex
enough to introduce their own rules and complexity. You're building
your own maze, in a way, and you might just get lost in it.

(((learning)))There will be times when reading this book feels terribly
frustrating. If you are new to programming, there will be a lot of new
material to digest. Much of this material will then be _combined_ in
ways that require you to make additional connections.

It is up to you to make the necessary effort. When you are struggling
to follow the book, do not jump to any conclusions about your own
capabilities. You are fine—you just need to keep at it. Take a break,
reread some material, and _always_ make sure you read and understand
the example programs and ((exercises)). Learning is hard work, but
everything you learn is yours and will make subsequent learning
easier.

(((program,nature of)))(((data)))A program is many things. It is a
piece of text typed by a programmer, it is the directing force that
makes the computer do what it does, it is data in the computer's
memory, yet it controls the actions performed on this same memory.
Analogies that try to compare programs to objects we are familiar with
tend to fall short. A superficially fitting one is that of a
machine—lots of separate parts tend to be involved, and to make the
whole thing tick, we have to consider the ways in which these parts
interconnect and contribute to the operation of the whole.

(((computer)))A computer is a machine built to act as a host for these
immaterial machines. Computers themselves can do only stupidly
straightforward things. The reason they are so useful is that they do
these things at an incredibly high speed. A program can ingeniously
combine an enormous number of these simple actions in order to do very
complicated things.

(((programming,joy of)))To some of us, writing computer programs is a
fascinating game. A program is a building of thought. It is costless
to build, it is weightless, and it grows easily under our typing
hands.

But without care, a program's size and ((complexity)) will grow out of
control, confusing even the person who created it. Keeping programs
under control is the main problem of programming. When a program
works, it is beautiful. The art of programming is the skill of
controlling complexity. The great program is subdued—made simple in
its complexity.

(((programming style)))(((best practices)))Many programmers believe
that this complexity is best managed by using only a small set of
well-understood techniques in their programs. They have composed
strict rules (“best practices”) prescribing the form programs should
have, and the more zealous among them will consider those who go
outside of this safe little zone to be _bad_ programmers.

(((experiment)))(((learning)))What hostility to the richness of
programming—to try to reduce it to something straightforward and
predictable, to place a taboo on all the weird and beautiful programs!
The landscape of programming techniques is enormous, fascinating in
its diversity, and still largely unexplored. It is certainly dangerous
going, luring the inexperienced programmer into all kinds of
confusion, but that only means you should proceed with caution and
keep your wits about you. As you learn there will always be new
challenges and new territory to explore. Programmers who refuse to
keep exploring will stagnate, forget their joy, and get bored with
their craft.


== What is JavaScript? ==

indexsee:[WWW,World Wide Web] indexsee:[Web,World Wide Web](((history)))(((Netscape)))(((browser)))(((web
application)))(((JavaScript)))(((JavaScript,history of)))(((World Wide
Web))) JavaScript was introduced in 1995 as a way to add programs to
web pages in the Netscape Navigator browser. The language has since
been adopted by all other major graphical web browsers. It has made modern
web applications possible—applications with which you can interact
directly, without doing a page reload for every action. But it is also used in more
traditional websites to provide various forms of interactivity and
cleverness.

(((Java)))(((naming)))It is important to note that JavaScript has
almost nothing to do with the programming language named Java. The
similar name was inspired by marketing considerations, rather than
good judgment. When JavaScript was being introduced, the Java language
was being heavily marketed and was gaining popularity. Someone
thought it was a good idea to try to ride along on this success. Now we
are stuck with the name.

== Code, and what to do with it ==

(((reading code)))(((writing code)))Code is the text that makes up
programs. Most chapters in this book contain quite a lot of it. In my
experience, reading code and writing ((code)) are indispensable parts of
((learning)) to program, so try to not just glance over the examples. Read
them attentively and understand them. This may be slow and confusing
at first, but I promise that you will quickly get the hang of it. The
same goes for the ((exercises)). Don't assume you understand them
until you've actually written a working solution.

(((interpretation)))I recommend you try your solutions to exercises
in an actual JavaScript interpreter. That way, you'll get immediate feedback on
whether what you are doing is working, and, I hope, you'll be
tempted to ((experiment)) and go beyond the exercises.

ifdef::interactive_target[]

When reading this book in your browser, you can edit (and run) all
example programs by clicking them.

endif::interactive_target[]

ifdef::book_target[]

(((download)))(((sandbox)))(((running code)))The easiest way to run
the example code in the book, and to experiment with it, is to look it
up in the online version of the book at
http://eloquentjavascript.net/[_eloquentjavascript.net_]. There, you
can click any code example to edit and run it and to see the
output it produces. To work on the exercises, go to
http://eloquentjavascript.net/code[_eloquentjavascript.net/code_],
which provides starting code for each coding exercise and allows you
to look at the solutions.

endif::book_target[]


== Programming Environment and TLC Library ==

To work through this curriculum, you will need to have a way to write
and run Javascript programs. Javascript programs can be run in various
ways, but the most common way is to run them with a web browser like
Firefox.

In order to run a Javascript program with a web browser, you
need a small page that tells the browser what to do. Browsers read
HTML pages that tell them not only what text and images to display on
the screen, but also any Javascript that should be run. For examples
in this text or your own programs, you should create two files. You
should do this with a _Text Editor_, which is like a word
processor but for programs. A (mostly) free good one that runs on
Macs, Windows, and Linux is called http://www.sublimetext.com/[_Sublime Text_] (mostly free means
that it costs money, but it has a free trial that lasts forever).

You should create a folder where
you will hold all the programs you write throughout this curiculum,
for example, `tlcjs` could be the name of the folder. Then open up
Sublime Text and create two new files:
`example1.html` and `example1.js`.  In
"example1.html", which is the file that you will open with your web
browser, we need to tell the web browser that we want to run
`example1.js`. We also want to include some pre-constructed
functionality for this curiculum. All HTML files start with a declaration of the particular version of HTML that we are using. HTML dates back to 1993, and many changes have happened, but to tell the browser that we want the current version, we start every HTML file with:

----
<!doctype html>
----

(By the way, we recommend typing, not copying this, so you
get the muscle memory of coding in your fingers!)

Then we need to start a section of the HTML document called the
"body". There are different parts of HTML documents, but this is the only one we need:

----
<body id="tlc-body">
----

Finally, we need to tell the browser that we want to run some
Javascript. There is a _tag_ (the name for these words inside
`<` and `>` that instruct the browser to do things) called `script`
that tells the browser to run a particular javascript file. First, we
need to include some common functionality (called `libraries`) - one
that is a popular open source library, and one that was written for
this curriculum:

----
  <script src="http://tlcjs.org/js/lodash.min.js"></script>
  <script src="http://tlcjs.org/js/tlc.js"></script>
----

Lastly, we need to tell it to include our `example1.js` file (which we
haven't written yet):

----
  <script src="example1.js"></script>
----

Now save that file. It should look something like:

---
<!doctype html>
<body id="tlc-body">
  <script src="http://tlcjs.org/js/lodash.min.js"></script>
  <script src="http://tlcjs.org/js/tlc.js"></script>
  <script src="example1.js"></script>
---

Next open up the other file, `example1.js`. To start, we will use one of the simplest operations, `print`, which simply prints a value on the page. In this case, we'll just print out the number 1:

----
print(1);
----

The `;` at the end of the line is an indication that we've finished
the current operation. We'll get into this more later.

Now save that file too, and open up `example1.html` in a web browser. You can do this either by going to `File->Open` in the browser or dragging the file onto the application icon (if applicable). When you do that, you should see a page with `1` on it.

image::img/screenshot.png[alt="Your first program: a '1'!"]

Congratulations! You've just written your first program!

== Typographic conventions ==

(((factorial function)))In this book, text written in a `monospaced`
font will represent elements of programs—sometimes
they are self-sufficient fragments, and sometimes they just refer to
part of a nearby program. Programs are written as follows:

[source,javascript]
----
function fac(n) {
  if (n == 0)
    return 1;
  else
    return fac(n - 1) * n;
}
----

(((print)))Sometimes, in order to show the output that a program
produces, the expected output is written after it, with two slashes
and an arrow in front.

[source,javascript]
----
print(fac(8));
// → 40320
----

Good luck!
